# Go to model directory
cd /well/mccarthy/users/maxlouis/oxford2/CNN_project/better_train/1CPM_random/

mkdir test_set_predictions

qsub -q gpu8.q -l gpu=2 -l gputype=p100  -V -cwd -N bassetpredict -e bassetpredict.err -o bassetpredict.out Basset_predict.sh

###Submit the following to gpu:
##### load torch modules & dependencies
module load torch/20170221-p100-gcc5.4.0
module load python/2.7.10-gcc4.9.3
export BEDTOOLS=/apps/well/bedtools/2.24.0/
export PATH=$BEDTOOLS:$PATH
export BASSETDIR=/well/got2d/agata/Basset/
export PATH=$BASSETDIR/src:$PATH
export PYTHONPATH=$BASSETDIR/src:$PYTHONPATH
export LUA_PATH="$BASSETDIR/src/?.lua;$LUA_PATH"
export PATH=${PATH}:/well/got2d/agata/bin/weblogo/
export PATH=${PATH}:/apps/well/meme/4.11.2_2/bin

basset_predict.py --cudnn original.iter1_best.th /well/mccarthy/users/maxlouis/oxford2/CNN_project/preprocessing/negative_set/data/final_step/1CPM/real_random/test_in.h5 test_set_pred2/iter1.newtest.txt


### In R
act=read.table("final_test_set_act.txt")

features=read.table("8col1CPM_samples.txt")
features=as.character(features$V1)

library("PRROC")
library(calibrate)

files<-list.files(path=".", patter=".test.txt$",recursive=TRUE)

cnn_res = matrix(,nrow=1, ncol=16)
for(i in 1:length(files)){
    df = read.table(files[i])
    for(f in 1:length(features)){
		   roc<-roc.curve(scores.class0 = df[,f], weights.class0 = act[,f])
		   pr<-pr.curve(scores.class0 = df[,f], weights.class0 = act[,f])
    	cnn_res[i,2*f-1]= roc$auc
		cnn_res[i,2*f]= pr$auc.integral
	}
}
write.table(cnn_res, file="test.AUC_ROC_PR.txt",sep="\t",quote=F)

# find mean, min, max - ROC and PR AUC
roc_AUC=data.frame(features=features, mean_ROC_AUC=apply(cnn_res, 2, mean)[seq(from=1,to=15,by=2)], min_ROC_AUC=apply(cnn_res, 2, min)[seq(from=1,to=15,by=2)], max_ROC_AUC=apply(cnn_res, 2, max)[seq(from=1,to=15,by=2)], sd_ROC_AUC=apply(cnn_res, 2, sd)[seq(from=1,to=15,by=2)])
pr_AUC=data.frame(features=features, mean_ROC_AUC=apply(cnn_res, 2, mean)[seq(from=2,to=16,by=2)], min_ROC_AUC=apply(cnn_res, 2, min)[seq(from=2,to=16,by=2)], max_ROC_AUC=apply(cnn_res, 2, max)[seq(from=2,to=16,by=2)], sd_ROC_AUC=apply(cnn_res, 2, sd)[seq(from=2,to=16,by=2)])

write.table(cbind(roc_AUC, pr_AUC), file="test.AUC_summary.txt", sep="\t",quote=F,row.names=F)



iter1=read.table("iter1.test.txt")
pdf("iter1.test.roc_pr.pdf")
for(f in 1:length(features)){
	roc<-roc.curve(scores.class0 = iter1[,f], weights.class0 = act[,f], curve=T, max.compute = T, min.compute = T, rand.compute = T)
	pr<-pr.curve(scores.class0 = iter1[,f], weights.class0 = act[,f], curve=T, max.compute = T, min.compute = T, rand.compute = T)

	plot(roc, rand.plot = TRUE, auc.main=T, main=paste0(features[f]," ROC"))
	plot(pr, rand.plot = TRUE,auc.main=T, main=paste0(features[f]," PR"))

}
dev.off()
